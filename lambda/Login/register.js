"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterHandler = void 0;
const node_fetch_1 = require("node-fetch");
const querystring_1 = require("querystring");
const dynamodb_1 = require("aws-sdk/clients/dynamodb");
const moment = require("moment");
const { REDIRECT_URI, SPOTIFY_CLIENT_ID, TABLE_NAME, SPOTIFY_CLIENT_SECRET } = process.env;
const dynamodb = new dynamodb_1.DocumentClient();
const RegisterHandler = async ({ body, queryStringParameters, requestContext, }) => {
    console.log(body, requestContext, queryStringParameters);
    const { code, error, state } = queryStringParameters;
    const { timeEpoch } = requestContext;
    if (error) {
        console.error(error);
        return { statusCode: 500 };
    }
    const data = await getSpotifyAuthToken(code);
    console.log(data);
    const now = new Date(timeEpoch);
    const expiration = moment(now).add(data.expires_in, "seconds");
    const spotifyUserResponse = await node_fetch_1.default(`https://api.spotify.com/v1/me`, {
        headers: {
            Authorization: `Bearer ${data.access_token}`,
        },
    });
    const userData = await spotifyUserResponse.json();
    console.info("remember me", userData);
    const putUserResult = await dynamodb
        .put({
        TableName: TABLE_NAME,
        Item: {
            pk: `u:${userData.email}`,
            sk: `u:${userData.email}`,
            ...data,
            ...userData,
            expiration: expiration.toISOString(),
            updatedAt: now.toISOString(),
        },
    })
        .promise();
    console.info("ddb put complete", putUserResult);
    return {
        statusCode: 302,
        headers: {
            location: `http://localhost:3000/sign-in?${querystring_1.stringify({
                ...userData,
            })}`,
        },
    };
};
exports.RegisterHandler = RegisterHandler;
async function getSpotifyAuthToken(code) {
    const queryString = querystring_1.stringify({
        grant_type: "authorization_code",
        code,
        redirect_uri: REDIRECT_URI,
    });
    const response = await node_fetch_1.default(`https://accounts.spotify.com/api/token`, {
        headers: {
            Authorization: `Basic ${Buffer.from(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`).toString("base64")}`,
            "content-type": "application/x-www-form-urlencoded",
        },
        body: queryString,
        method: "POST",
    });
    console.log(response);
    return response.json();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwyQ0FBK0I7QUFDL0IsNkNBQXdDO0FBQ3hDLHVEQUEwRDtBQUMxRCxpQ0FBa0M7QUFTbEMsTUFBTSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUscUJBQXFCLEVBQUUsR0FDM0UsT0FBTyxDQUFDLEdBQWtCLENBQUM7QUFVNUIsTUFBTSxRQUFRLEdBQUcsSUFBSSx5QkFBYyxFQUFFLENBQUM7QUFFL0IsTUFBTSxlQUFlLEdBQWlDLEtBQUssRUFBRSxFQUNuRSxJQUFJLEVBQ0oscUJBQXFCLEVBQ3JCLGNBQWMsR0FDZCxFQUFFLEVBQUU7SUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUN6RCxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxxQkFBc0IsQ0FBQztJQUN0RCxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsY0FBYyxDQUFDO0lBQ3JDLElBQUksS0FBSyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDO0tBQzNCO0lBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxJQUFLLENBQUMsQ0FBQztJQUU5QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMvRCxNQUFNLG1CQUFtQixHQUFHLE1BQU0sb0JBQUssQ0FBQywrQkFBK0IsRUFBRTtRQUN4RSxPQUFPLEVBQUU7WUFDUixhQUFhLEVBQUUsVUFBVSxJQUFJLENBQUMsWUFBWSxFQUFFO1NBQzVDO0tBQ0QsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxRQUFRLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsRCxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0QyxNQUFNLGFBQWEsR0FBRyxNQUFNLFFBQVE7U0FDbEMsR0FBRyxDQUFDO1FBQ0osU0FBUyxFQUFFLFVBQVU7UUFDckIsSUFBSSxFQUFFO1lBQ0wsRUFBRSxFQUFFLEtBQUssUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN6QixFQUFFLEVBQUUsS0FBSyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3pCLEdBQUcsSUFBSTtZQUNQLEdBQUcsUUFBUTtZQUNYLFVBQVUsRUFBRSxVQUFVLENBQUMsV0FBVyxFQUFFO1lBQ3BDLFNBQVMsRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFO1NBQzVCO0tBQ0QsQ0FBQztTQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNoRCxPQUFPO1FBQ04sVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUU7WUFDUixRQUFRLEVBQUUsaUNBQWlDLHVCQUFTLENBQUM7Z0JBQ3BELEdBQUcsUUFBUTthQUNYLENBQUMsRUFBRTtTQUNKO0tBQ0QsQ0FBQztBQUNILENBQUMsQ0FBQztBQTlDVyxRQUFBLGVBQWUsbUJBOEMxQjtBQUVGLEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxJQUFZO0lBQzlDLE1BQU0sV0FBVyxHQUFHLHVCQUFTLENBQUM7UUFDN0IsVUFBVSxFQUFFLG9CQUFvQjtRQUNoQyxJQUFJO1FBQ0osWUFBWSxFQUFFLFlBQVk7S0FDMUIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxRQUFRLEdBQUcsTUFBTSxvQkFBSyxDQUFDLHdDQUF3QyxFQUFFO1FBQ3RFLE9BQU8sRUFBRTtZQUNSLGFBQWEsRUFBRSxTQUFTLE1BQU0sQ0FBQyxJQUFJLENBQ2xDLEdBQUcsaUJBQWlCLElBQUkscUJBQXFCLEVBQUUsQ0FDL0MsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdEIsY0FBYyxFQUFFLG1DQUFtQztTQUNuRDtRQUNELElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxNQUFNO0tBQ2QsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QixPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5SGFuZGxlclYyIH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcbmltcG9ydCBmZXRjaCBmcm9tIFwibm9kZS1mZXRjaFwiO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSBcInF1ZXJ5c3RyaW5nXCI7XG5pbXBvcnQgeyBEb2N1bWVudENsaWVudCB9IGZyb20gXCJhd3Mtc2RrL2NsaWVudHMvZHluYW1vZGJcIjtcbmltcG9ydCBtb21lbnQgPSByZXF1aXJlKFwibW9tZW50XCIpO1xuaW50ZXJmYWNlIFJlZ2lzdGVyRW52IGV4dGVuZHMgTm9kZUpTLlByb2Nlc3NFbnYge1xuXHRUQUJMRV9OQU1FOiBzdHJpbmc7XG5cdFNQT1RJRllfS0VZOiBzdHJpbmc7XG5cdFNQT1RJRllfQ0xJRU5UX0lEOiBzdHJpbmc7XG5cdFNQT1RJRllfQ0xJRU5UX1NFQ1JFVDogc3RyaW5nO1xuXHRSRURJUkVDVF9VUkk6IHN0cmluZztcbn1cblxuY29uc3QgeyBSRURJUkVDVF9VUkksIFNQT1RJRllfQ0xJRU5UX0lELCBUQUJMRV9OQU1FLCBTUE9USUZZX0NMSUVOVF9TRUNSRVQgfSA9XG5cdHByb2Nlc3MuZW52IGFzIFJlZ2lzdGVyRW52O1xuXG5pbnRlcmZhY2UgU3BvdGlmeUF1dGhUb2tlbiB7XG5cdGFjY2Vzc190b2tlbjogc3RyaW5nO1xuXHR0b2tlbl90eXBlOiBzdHJpbmc7XG5cdGV4cGlyZXNfaW46IG51bWJlcjtcblx0cmVmcmVzaF90b2tlbjogc3RyaW5nO1xuXHRzY29wZTogc3RyaW5nO1xufVxuXG5jb25zdCBkeW5hbW9kYiA9IG5ldyBEb2N1bWVudENsaWVudCgpO1xuXG5leHBvcnQgY29uc3QgUmVnaXN0ZXJIYW5kbGVyOiBBUElHYXRld2F5UHJveHlIYW5kbGVyVjI8e30+ID0gYXN5bmMgKHtcblx0Ym9keSxcblx0cXVlcnlTdHJpbmdQYXJhbWV0ZXJzLFxuXHRyZXF1ZXN0Q29udGV4dCxcbn0pID0+IHtcblx0Y29uc29sZS5sb2coYm9keSwgcmVxdWVzdENvbnRleHQsIHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyk7XG5cdGNvbnN0IHsgY29kZSwgZXJyb3IsIHN0YXRlIH0gPSBxdWVyeVN0cmluZ1BhcmFtZXRlcnMhO1xuXHRjb25zdCB7IHRpbWVFcG9jaCB9ID0gcmVxdWVzdENvbnRleHQ7XG5cdGlmIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHRcdHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCB9O1xuXHR9XG5cdGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRTcG90aWZ5QXV0aFRva2VuKGNvZGUhKTtcblxuXHRjb25zb2xlLmxvZyhkYXRhKTtcblx0Y29uc3Qgbm93ID0gbmV3IERhdGUodGltZUVwb2NoKTtcblx0Y29uc3QgZXhwaXJhdGlvbiA9IG1vbWVudChub3cpLmFkZChkYXRhLmV4cGlyZXNfaW4sIFwic2Vjb25kc1wiKTtcblx0Y29uc3Qgc3BvdGlmeVVzZXJSZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS9tZWAsIHtcblx0XHRoZWFkZXJzOiB7XG5cdFx0XHRBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7ZGF0YS5hY2Nlc3NfdG9rZW59YCxcblx0XHR9LFxuXHR9KTtcblx0Y29uc3QgdXNlckRhdGEgPSBhd2FpdCBzcG90aWZ5VXNlclJlc3BvbnNlLmpzb24oKTtcblx0Y29uc29sZS5pbmZvKFwicmVtZW1iZXIgbWVcIiwgdXNlckRhdGEpO1xuXHRjb25zdCBwdXRVc2VyUmVzdWx0ID0gYXdhaXQgZHluYW1vZGJcblx0XHQucHV0KHtcblx0XHRcdFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcblx0XHRcdEl0ZW06IHtcblx0XHRcdFx0cGs6IGB1OiR7dXNlckRhdGEuZW1haWx9YCxcblx0XHRcdFx0c2s6IGB1OiR7dXNlckRhdGEuZW1haWx9YCxcblx0XHRcdFx0Li4uZGF0YSxcblx0XHRcdFx0Li4udXNlckRhdGEsXG5cdFx0XHRcdGV4cGlyYXRpb246IGV4cGlyYXRpb24udG9JU09TdHJpbmcoKSxcblx0XHRcdFx0dXBkYXRlZEF0OiBub3cudG9JU09TdHJpbmcoKSxcblx0XHRcdH0sXG5cdFx0fSlcblx0XHQucHJvbWlzZSgpO1xuXHRjb25zb2xlLmluZm8oXCJkZGIgcHV0IGNvbXBsZXRlXCIsIHB1dFVzZXJSZXN1bHQpO1xuXHRyZXR1cm4ge1xuXHRcdHN0YXR1c0NvZGU6IDMwMixcblx0XHRoZWFkZXJzOiB7XG5cdFx0XHRsb2NhdGlvbjogYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9zaWduLWluPyR7c3RyaW5naWZ5KHtcblx0XHRcdFx0Li4udXNlckRhdGEsXG5cdFx0XHR9KX1gLFxuXHRcdH0sXG5cdH07XG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRTcG90aWZ5QXV0aFRva2VuKGNvZGU6IHN0cmluZyk6IFByb21pc2U8U3BvdGlmeUF1dGhUb2tlbj4ge1xuXHRjb25zdCBxdWVyeVN0cmluZyA9IHN0cmluZ2lmeSh7XG5cdFx0Z3JhbnRfdHlwZTogXCJhdXRob3JpemF0aW9uX2NvZGVcIixcblx0XHRjb2RlLFxuXHRcdHJlZGlyZWN0X3VyaTogUkVESVJFQ1RfVVJJLFxuXHR9KTtcblx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hY2NvdW50cy5zcG90aWZ5LmNvbS9hcGkvdG9rZW5gLCB7XG5cdFx0aGVhZGVyczoge1xuXHRcdFx0QXV0aG9yaXphdGlvbjogYEJhc2ljICR7QnVmZmVyLmZyb20oXG5cdFx0XHRcdGAke1NQT1RJRllfQ0xJRU5UX0lEfToke1NQT1RJRllfQ0xJRU5UX1NFQ1JFVH1gXG5cdFx0XHQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWAsXG5cdFx0XHRcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuXHRcdH0sXG5cdFx0Ym9keTogcXVlcnlTdHJpbmcsXG5cdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0fSk7XG5cdGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cbiJdfQ==