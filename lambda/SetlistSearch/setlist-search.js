"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchSetlistHandler = void 0;
const node_fetch_1 = require("node-fetch");
const aws_sdk_1 = require("aws-sdk");
const dynamodb_data_mapper_1 = require("@aws/dynamodb-data-mapper");
const dynamodb_1 = require("aws-sdk/clients/dynamodb");
const querystring_1 = require("querystring");
const { SETLIST_FM_KEY, TABLE_NAME } = process.env;
const dynamo = new aws_sdk_1.DynamoDB();
const docClient = new dynamodb_1.DocumentClient();
const client = new dynamodb_data_mapper_1.DataMapper({ client: dynamo });
const searchSetlistHandler = async (event, context) => {
    console.info("eventData: ", event);
    const { queryStringParameters } = event;
    const { artistMbid } = queryStringParameters;
    if (!SETLIST_FM_KEY) {
        throw new Error("Missing Setlist FM API Key");
    }
    const headers = new node_fetch_1.Headers({
        "x-api-key": SETLIST_FM_KEY,
        Accept: "application/json",
    });
    const searchResult = await node_fetch_1.default(`https://api.setlist.fm/rest/1.0/artist/${artistMbid}/setlists`, {
        method: "GET",
        headers,
    });
    let { setlist: setlists } = await searchResult.json();
    console.info("Setlist data: ", setlists);
    let artistName;
    const fixedSetlists = setlists.map((setlist) => {
        artistName = setlist.artist.name;
        const fullSet = setlist.sets.set.reduce((prev, { song }) => {
            return [...prev, ...song];
        }, []);
        return { ...setlist, set: fullSet };
    });
    //persist this data and try to get it at the beginning of this lambda
    //get user from db
    const userEmail = "grifhammer@gmail.com";
    console.log(`getting user for email: ${userEmail}`);
    const { access_token, expiration } = await getUser(userEmail);
    if (new Date() > new Date(expiration)) {
        return {
            statusCode: 403,
            data: "expired token",
        };
    }
    // reduce all songs to prevent double requests
    const dedupedSongs = reduceSongs(fixedSetlists);
    //get spotify data
    const spotifySongData = getAllSpotifySongData(access_token, artistName, dedupedSongs);
    const promises = Object.entries(spotifySongData);
    console.info("Promises", promises);
    await Promise.all(promises);
    const resolvedData = {};
    const data = Object.entries(spotifySongData).map(async ([artistName, promise]) => {
        console.info(artistName, await promise);
        resolvedData[artistName] = await promise;
    });
    await Promise.all(data);
    console.info(resolvedData);
    const returnBody = fixedSetlists.map(({ set, ...setlist }) => {
        console.log(set);
        return {
            ...setlist,
            set: set.map(({ name }) => {
                const thisSong = resolvedData[name].tracks.items[0];
                if (!thisSong) {
                    console.log(resolvedData[name]);
                    return { name };
                }
                console.log(thisSong);
                return {
                    spotifyUri: thisSong.uri,
                    spotifyId: thisSong.id,
                    spotifyImages: thisSong.images,
                    spotifyHref: thisSong.href,
                    name,
                };
            }),
        };
    });
    const response = {
        statusCode: 200,
        body: JSON.stringify(returnBody),
        headers: {
            "Access-Control-Allow-Origin": "*",
        },
    };
    return response;
};
exports.searchSetlistHandler = searchSetlistHandler;
function getAllSpotifySongData(accessToken, artistName, songList) {
    const spotifySongData = {};
    for (const songName in songList) {
        spotifySongData[songName] = getSpotifySong(accessToken, songName, artistName);
    }
    return spotifySongData;
}
async function getSpotifySong(accessToken, songName, artistName) {
    const queryString = querystring_1.stringify({
        q: `track:${songName} artist:${artistName}`,
        type: "track",
        market: "from_token",
        limit: 1,
    });
    const spotifyResult = await node_fetch_1.default(`https://api.spotify.com/v1/search?${queryString}`, {
        headers: {
            Authorization: `Bearer ${accessToken}`,
        },
    });
    return spotifyResult.json();
}
async function getUser(email) {
    const { Item: user } = await docClient
        .get({
        TableName: "theOneTable",
        Key: {
            pk: `u:${email}`,
            sk: `u:${email}`,
        },
    })
        .promise();
    // const user = await client.get(
    // 	Object.assign(new User(), { pk: `u:${email}`, sk: `u:${email}` })
    // );
    console.log(user);
    return {
        birthdate: "",
        email: "",
        country: "",
        product: "",
        external_urls: {
            spotify: "",
        },
        href: "",
        id: "",
        type: "user",
        uri: "",
        access_token: "",
        expiration: new Date(),
        ...user,
    };
}
function reduceSongs(setlists) {
    return setlists.reduce((prev, curr) => {
        const reducedThing = curr.set.reduce((prev, current) => {
            return {
                ...prev,
                [current.name]: current,
            };
        }, {});
        return { ...prev, ...reducedThing };
    }, {});
}
//# sourceMappingURL=data:application/json;base64,